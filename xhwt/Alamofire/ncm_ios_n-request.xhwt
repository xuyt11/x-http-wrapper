<t:header>
{
    "fileName":"${request_group_class_name}.swift",
    "fileDirs":[
        {
            "osName":"Windows",
            "path":"I:/NewChamaStudio/newchama_android/NewChama/newchama.common/src/main/java/com/newchama_ios/api/"
        },
        {
            "osName":"Mac OS X",
            "path":"/Users/newchama/Documents/ytxu/ios_workspace/alamofire/alamofire/"
        }
    ]
}
</t:header>
import Foundation
import UIKit
import Alamofire
import ObjectMapper
import SwiftyJSON

<t:retain type="import"/>

class ${request_group_class_name}: NSObject {

<t:retain type="field"/>

<t:foreach each="requests">
	/**
	 * @version ${request_version}
	 * @requestUrl ${request_url}
	 <t:if isNotEmpty="request_title">
	 * @title ${request_title}
	 </t:if_end>
	 <t:if isNotEmpty="request_desc">
	 * @desc ${request_desc}
	 </t:if_end>
	 *
	 <t:foreach each="headers">
	 * @header ${header_name} ${header_desc}
	 </t:foreach>
	 <t:foreach each="inputs">
	 <t:if isTrue="input_isOptional">
	 * @param ${input_name} isOptional ${field_read_type} ${input_desc}
	 <t:else>
	 * @param ${input_name} ${field_read_type} ${input_desc}
	 </t:if_end>
	 </t:foreach>
	 */
	 <t:list_attach each="url_dynamic_params" attach="url_dynamic_param_name_format">
         <t:list_attach list_temp="${url_dynamic_param_field_name}: String, "/>
     </t:list_attach>
    <t:if isTrue="request_url_has_dynamic_param">
    static func ${request_name}(${first_url_field_name} ${url_dynamic_param_name_format}para: Dic, success: SuccessedClosure, error: ErrorClosure, failure: FailedClosure) -> Request {
    <t:else>
    static func ${request_name}(para para: Dic, success: SuccessedClosure, error: ErrorClosure, failure: FailedClosure) -> Request {
    </t:if_end>
        <t:if isTrue="request_url_has_dynamic_param">
        <t:list_replace each="url_dynamic_params" replace_key="url_dynamic_param_name_format2" list_value=", ${url_dynamic_param_field_name}">
		let url = String.init(format: "${request_convert_url}"${url_dynamic_param_name_format2})
		</t:list_replace>
        <t:else>
        let url = "${request_convert_url}"
        </t:if_end>
        <t:if isTrue="needToken">
        let needToken = true
        <t:else>
        let needToken = false
        </t:if_end>
        return HttpClient.request(type: .${request_METHOD}, urlStr: url, params: para, needToken: needToken, success: success, failed: failure, error: error)
	}

</t:foreach>

<t:retain type="method"/>

<t:retain type="other"/>

}