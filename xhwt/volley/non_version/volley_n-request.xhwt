<t:header>
{
    "fileName":"${request_group_class_name}.java",
    "fileDirs":[
        {
            "osName":"Windows",
            "path":"u should setup by self"
        },
        {
            "osName":"Mac OS X",
            "path":"/Users/newchama/Documents/ytxu/VolleyWrapper/app/src/main/java/ytxu/cn/volley/api/api"
        }
    ]
}
</t:header>
package ytxu.cn.volley.api.api;

import android.content.Context;

import com.kdlc.framework.http.BaseApi;
import com.kdlc.framework.http.HttpProxy;
import com.kdlc.framework.http.bean.RequestBean;
import com.kdlc.framework.http.interfaces.HttpResultInterface;

<t:retain type="import"/>

public class ${request_group_class_name} extends BaseApi {

	public static ${request_group_class_name} getInstance() {
		return Helper.instance;
	}

	private static class Helper {
		public static final ${request_group_class_name} instance = new ${request_group_class_name}();
	}

	private ${request_group_class_name}() {
	    super();
	}

<t:retain type="field"/>

<t:foreach each="requests">
	/**
	 * @version ${request_version}
	 * @requestUrl ${request_url}
	 <t:if isNotEmpty="request_title">
	 * @title ${request_title}
	 </t:if_end>
	 <t:if isNotEmpty="request_desc">
	 * @desc ${request_desc}
	 </t:if_end>
	 *
	 <t:foreach each="headers">
	 * @header ${header_name} ${header_desc}
	 </t:foreach>
	 <t:foreach each="inputs">
	 <t:if isTrue="input_isOptional">
	 * @param ${input_name} isOptional ${field_read_type} ${input_desc}
	 <t:else>
	 * @param ${input_name} ${field_read_type} ${input_desc}
	 </t:if_end>
	 </t:foreach>
	 */
	public void ${request_name}(Context cxt001,
	    <t:list each="RESTful_fields" singleLine>
            </t:start value="		"/>
            </t:eachTemp value="String ${RESTful_field_name}, "/>
            </t:end value=""/>
	    </t:list>
		RequestBean requset, HttpResultInterface callBack) {
        <t:if isTrue="request_url_is_RESTful">
        <t:list_replace each="RESTful_fields" replace_key="restful_name_list" list_value=", ${RESTful_field_name}">
		String realUrl = String.format(getFullUrl("${request_convert_url}")${restful_name_list});
		</t:list_replace>
        <t:else>
		String realUrl = getFullUrl("${request_normal_url}");
        </t:if_end>
        HttpProxy.getInstance(cxt001).on${requestMethodByCapitalizeCamelCase}Request(realUrl, requset, callBack);
	}

</t:foreach>

<t:retain type="method"/>

<t:retain type="other"/>

}